# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies
        # https://github.com/actions/setup-python?tab=readme-ov-file#caching-packages-dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi
        pip install .
    - name: Test with pytest
      run: |
        mkdir -p test-reports
        # https://stackoverflow.com/a/1221844/7346915
        mkfifo pipe
        tee pytest-coverage.txt < pipe &
        echo $?
        py.test --junitxml=test-reports/test-report.xml --cov-report=term-missing:skip-covered --cov=diffractio > pipe

    - name: Pytest coverage comment
      uses: MishaKav/pytest-coverage-comment@v1.1.51
      if: always()
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./test-reports/test-report.xml
        
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          test-reports/**/*.xml
          test-reports/**/*.trx
          test-reports/**/*.json

